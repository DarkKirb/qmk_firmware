data = {
    ' ': [(1, 'space')],
    '!': [(3, 'k')],
    '"': [(3, ',')],
    '#': [(3, 'ü')],
    '$': [(2, '6'), (3, 'ö')],
    '%': [(3, 'm'), (3, 'p0')],
    '&': [(3, 'q')],
    "'": [(3, '.')],
    "(": [(3, 'n')],
    ")": [(3, 'r')],
    "*": [(1, 'kp_asterisk'), (2, 'kp_asterisk'), (3, 'o'), (4, '0')],
    "+": [(1, 'kp_plus'), (2, 'kp_plus'), (3, 'b'), (4, 'q')],
    ",": [(1, 'kp_dot'), (3, 'kp_dot'), (4, 'd')],
    "-": [(1, '-'), (1, 'kp_minus'), (2, 'kp_minus'), (3, 't'), (4, '-')],
    ".": [(1, '.'), (2, 'kp_dot'), (4, 'y')],
    "/": [(1, 'kp_slash'), (2, 'kp_slash'), (3, 'i'), (4, '9')],
    "0": [(1, '0'), (1, 'p0'), (4, ' ')],
    "1": [(1, '1'), (1, 'p1'), (4, 'm')],
    "2": [(1, '2'), (1, 'p2'), (4, ',')],
    "3": [(1, '3'), (1, 'p3'), (4, '.')],
    "4": [(1, '4'), (1, 'p4'), (4, 'n')],
    "5": [(1, '5'), (1, 'p5'), (4, 'r')],
    "6": [(1, '6'), (1, 'p6'), (4, 't')],
    "7": [(1, '7'), (1, 'p7'), (4, 'h')],
    "8": [(1, '8'), (1, 'p8'), (4, 'g')],
    "9": [(1, '9'), (1, 'p9'), (4, 'f')],
    ":": [(3, 'd'), (3, 'p5'), (4, 'b')],
    ";": [(3, 'j'), (4, 'j')],
    "<": [(3, 'h')],
    "=": [(3, 'f'), (3, 'num_lock')],
    ">": [(3, 'g')],
    '?': [(3, 's')],
    '@': [(3, 'y')],
    '[': [(3, 'l')],
    '\\': [(3, 'u')],
    ']': [(3, 'c')],
    '^': [(3, 'w')],
    '_': [(3, 'v')],
    '`': [(3, 'z')],
    '{': [(3, 'a')],
    '|': [(3, 'ä')],
    '}': [(3, 'e')],
    '~': [(3, 'p')],
    '\u00a0': [(5, ' ')],
    '¡': [(4, 'k')],
    '¢': [(3, '6')],
    '£': [(4, '6')],
    '¤': [(4, '7')],
    '¥': [(3, '7')],
    '§': [(2, '2')],
    'ª': [(4, '1')],
    '«': [(2, '5')],
    '¬': [(6, '1')],
    '\u00ad': [(6, '-')],
    '°': [(2, '1')],
    '±': [(3, 'kp_plus')],
    '²': [(3, '2')],
    '³': [(3, '3')],
    '·': [(4, '5')],
    '¹': [(3, '1')],
    'º': [(4, '2')],
    '»': [(2, '4')],
    '¿': [(4, 's')],
    'Ä': [(2, 'ä')],
    'Ö': [(2, 'ö')],
    '×': [(4, 'kp_asterisk'), (6, 'k')],
    'Ü': [(2, 'ü')],
    'ß': [(1, 'ß')],
    'ä': [(1, 'ä')],
    'ö': [(1, 'ö')],
    '÷': [(3, 'kp_slash')],
    'ü': [(1, 'ü')],
    'ſ': [(3, 'ß')],
    'Γ': [(6, 'g')],
    'Δ': [(6, 'd')],
    'Θ': [(6, 'j')],
    'Λ': [(6, 'l')],
    'Ξ': [(6, 'x')],
    'Π': [(6, 'p')],
    'Σ': [(6, 's')],
    'Φ': [(6, 'f')],
    'Ψ': [(6, 'h')],
    'Ω': [(6, 'w')],
    'α': [(5, 'a')],
    'β': [(5, 'b')],
    'γ': [(5, 'g')],
    'δ': [(5, 'd')],
    'ε': [(5, 'e')],
    'ζ': [(5, 'z')],
    'η': [(5, 'ä')],
    'θ': [(5, 'j')],
    'ι': [(5, 'i')],
    'κ': [(5, 'k')],
    'λ': [(5, 'l')],
    'μ': [(5, 'm')],
    'ν': [(5, 'n')],
    'ξ': [(5, 'x')],
    'ο': [(5, 'o')],
    'π': [(5, 'p')],
    'ρ': [(5, 'r')],
    'τ': [(5, 't')],
    'ς': [(5, 'ß')],
    'σ': [(5, 's')],
    'υ': [(5, 'y')],
    'φ': [(5, 'f')],
    'χ': [(5, 'c')],
    'ψ': [(5, 'h')],
    'ω': [(5, 'w')],
    'ϑ': [(5, '.')],
    'ϕ': [(5, 'q')],
    'ϰ': [(5, '7')],
    'ϱ': [(5, ',')],
    'ϵ': [(5, 'ö')],
    'ẞ': [(2, 'ß')],
    '\u2011': [(5, '-')],
    '\u2013': [(2, ',')],
    '\u2014': [(2, '-')],
    '‘': [(3, '9')],
    '’': [(3, '0')],
    '‚': [(3, '8')],
    '“': [(2, '9')],
    '”': [(2, '0')],
    '„': [(2, '8')],
    '†': [(2, 'p9')],
    '•': [(2, '.')],
    '‣': [(2, 'p6')],
    '…': [(3, 'x')],
    '\u202f': [(6, ' ')],
    '‰': [(5, 'p0')],
    '′': [(5, 'kp_dot')],
    '″': [(6, 'kp_dot')],
    '‹': [(3, '5')],
    '›': [(3, '4')],
    '\u2044': [(4, 'kp_slash')],
    '₀': [(5, '0')],
    '₁': [(5, '1')],
    '₂': [(5, '2')],
    '₃': [(5, '3')],
    '€': [(2, '7'), (2, 'p5')],
    'ℂ': [(6, 'c')],
    'ℓ': [(2, '3')],
    'ℕ': [(6, 'n')],
    '№': [(4, '3')],
    'ℚ': [(6, 'q')],
    'ℝ': [(6, 'r')],
    'ℤ': [(6, 'z')],
    'ℵ': [(6, 'ä')],
    '←': [(3, 'p4')],
    '↑': [(3, 'p8')],
    '→': [(3, 'p6'), (6, '7')],
    '↓': [(3, 'p2')],
    '↔': [(3, 'p1')],
    '↕': [(3, 'p7')],
    '↦': [(6, '.')],
    '⇌': [(3, 'p3')],
    '⇐': [(6, 'b')],
    '⇒': [(6, ',')],
    '⇔': [(6, 'm')],
    '∀': [(6, 'a')],
    '∂': [(6, 't')],
    '∃': [(6, 'e')],
    '∅': [(6, '0')],
    '∇': [(6, 'y')],
    '∈': [(6, 'o')],
    '\u2212': [(3, 'kp_minus'), (4, 'ß')],
    '∓': [(4, 'kp_plus')],
    '∔': [(6, 'kp_plus')],
    '∖': [(4, 'kp_minus')],
    '∘': [(6, 'ß')],
    '√': [(6, 'v')],
    '∝': [(6, '9')],
    '∞': [(6, '8')],
    '∡': [(6, '5')],
    '\u2223': [(6, 'kp_slash')],
    '∥': [(6, '6')],
    '∧': [(6, '3')],
    '∨': [(6, '2')],
    '∩': [(5, 'p8'), (6, 'ö')],
    '∪': [(5, 'p2'), (6, 'ü')],
    '∫': [(6, 'i')],
    '∸': [(6, 'kp_minus')],
    '≈': [(5, 'num_lock')],
    '≠': [(4, 'num_lock')],
    '≡': [(6, 'num_lock')],
    '≤': [(5, 'p1')],
    '≥': [(5, 'p3')],
    '≪': [(5, 'p7')],
    '≫': [(5, 'p9')],
    '⊂': [(5, 'p4'), (6, 'u')],
    '⊃': [(5, 'p6')],
    '⊆': [(6, 'p4')],
    '⊇': [(6, 'p6')],
    '⊕': [(5, 'kp_plus')],
    '⊖': [(5, 'kp_minus')],
    '⊗': [(6, 'kp_asterisk')],
    '⊙': [(5, 'kp_asterisk')],
    '⊥': [(6, '4')],
    '⊶': [(5, 'p5')],
    '⊷': [(6, 'p5')],
    '⋂': [(6, 'p8')],
    '⋃': [(6, 'p2')],
    '⋅': [(3, 'kp_asterisk')],
    '⌀': [(5, 'kp_slash')],
    '⌈': [(6, 'p7')],
    '⌉': [(6, 'p9')],
    '⌊': [(6, 'p1')],
    '⌋': [(6, 'p3')],
    '␣': [(2, 'p0')],
    '□': [(6, 'p0')],
    '♠': [(2, 'p3')],
    '♣': [(2, 'p4')],
    '♥': [(2, 'p2')],
    '♦': [(2, 'p1')],
    '♀': [(5, '4')],
    '♂': [(5, '5')],
    '⚥': [(5, '6')],
    '✔': [(2, 'p7')],
    '✘': [(2, 'p8')],
    '⟨': [(5, '8')],
    '⟩': [(5, '9')]
}

for c in range(0x41, 0x5B):
    c = chr(c)
    data[c] = [(2, c.lower())]
    data[c.lower()] = [(1, c.lower())]

trans = {
    'x': 'q',
    'v': 'w',
    'l': 'e',
    'c': 'r',
    'w': 't',
    'k': 'y',
    'h': 'u',
    'g': 'i',
    'f': 'o',
    'q': 'p',
    'ß': 'lbrc',
    'u': 'a',
    'i': 's',
    'a': 'd',
    'e': 'f',
    'o': 'g',
    's': 'h',
    'n': 'j',
    'r': 'k',
    't': 'l',
    'd': 'scln',
    'y': 'quot',
    'ü': 'z',
    'ö': 'x',
    'ä': 'c',
    'p': 'v',
    'z': 'b',
    'b': 'n',
    ',': 'comm',
    '.': 'dot',
    'j': 'slsh',
    '-': 'mins',
    ' ': 'space'
}

keys = {}


def insert_key(key, layer, char):
    if key in trans:
        key = trans[key]
    if key not in keys:
        keys[key] = [0, 0, 0, 0, 0, 0]
    if keys[key][layer] != 0:
        raise Exception(f"duplicate key/layer combo: {key},{layer}={char}, current value: {chr(keys[key][layer])}")
    keys[key][layer] = ord(char)


for (char, value) in data.items():
    for (layer, key) in value:
        insert_key(key, layer - 1, char)

print("const uint16_t keycode_to_char[][6] = {")

for (key, value) in keys.items():
    print(f"  [KC_{key.upper()}] = {{")
    for char in value:
        print(f"    {hex(char)},")
    print("  },")

print("};")
